**********Circular queue code using Array******************


#include<iostream>
using namespace std;
struct queue{
    int size;
    int front;
    int rear;
    int *Q;
};
void create(struct queue *q, int size){
    q->size=size;
    q->front=q->rear=-1;
    q->Q=new int[q->size];
}
void enqueue(struct queue *q,int x){
    if((q->rear+1)%q->size==q->front){ // Special code  for being circular queue;
        cout<<"Queue is full:"<<endl;
    }
    else{
        q->rear=(q->rear+1)%q->size;
        q->Q[q->rear]=x;
    }
}
int dequeue(struct queue *q){
    int x=-1;
    if(q->front==q->rear){
        cout<<"Queue is empty"<<endl;
    }
    else{
        q->front=(q->front+1)%q->size;
        x=q->Q[q->front];
        
    }
    return x;
}
void display(struct queue *q){
    for(int i=q->front+1; i<q->rear; i++){
        cout<<q->Q[i]<<" ";
    }
    cout<<endl;
}
int main(){
     struct queue q;
     create(&q,6);
     enqueue(&q,23);
     enqueue(&q,34);
     enqueue(&q,45);
     enqueue(&q,45);
     enqueue(&q,45);
     enqueue(&q,45);
     display(&q);
     cout<<dequeue(&q);
     return 0;
}



*********** Queue using linked list***********************

#include<iostream>
using namespace std;
struct node
{
 int data;
 struct node *next;
 
};
struct node *front=NULL,*rear=NULL;
void enqueue(int x)
{
 struct node *t;
 t=new node;
 if(t==NULL)
 cout<<"Queue is full"<<endl;
 else
 {
 t->data=x;
 t->next=NULL;
 if(front==NULL)
 front=rear=t;
 else
 {
 rear->next=t;
 rear=t;
 }
 }
 
}
int dequeue()
{
 int x=-1;
 struct node* t;
 
 if(front==NULL)
 cout<<"Queue is empty"<<endl;
 else
 {
 x=front->data;
 t=front;
 front=front->next;
delete t;
 }
 return x;
}
void Display()
{
 struct node *p=front;
 while(p)
 {
 cout<<p->data<<" ";
 p=p->next;
 }
 cout<<endl;
}
int main()
{
 enqueue(10);
 enqueue(20);
 enqueue(30);
 enqueue(40);
 enqueue(50);
 
 Display();
 
 cout<<dequeue();
 
 return 0;}
